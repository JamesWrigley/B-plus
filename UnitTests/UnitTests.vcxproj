<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <VCProjectVersion>15.0</VCProjectVersion>
    <ProjectGuid>{CFBD29BA-0078-4366-BA99-73C68832B766}</ProjectGuid>
    <Keyword>Win32Proj</Keyword>
    <RootNamespace>UnitTests</RootNamespace>
    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <LinkIncremental>true</LinkIncremental>
    <OutDir>$(SolutionDir)build\$(Platform)-$(Configuration)\$(ProjectName)\</OutDir>
    <IntDir>$(SolutionDir)build\temp\$(Platform)-$(Configuration)\$(ProjectName)\</IntDir>
    <IncludePath>$(TargetDir)..\B+\compile-time\include;$(ProjectDir)dependencies\include;$(IncludePath)</IncludePath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <LinkIncremental>true</LinkIncremental>
    <OutDir>$(SolutionDir)build\$(Platform)-$(Configuration)\$(ProjectName)\</OutDir>
    <IntDir>$(SolutionDir)build\temp\$(Platform)-$(Configuration)\$(ProjectName)\</IntDir>
    <IncludePath>$(TargetDir)..\B+\compile-time\include;$(ProjectDir)dependencies\include;$(IncludePath)</IncludePath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <LinkIncremental>false</LinkIncremental>
    <OutDir>$(SolutionDir)build\$(Platform)-$(Configuration)\$(ProjectName)\</OutDir>
    <IntDir>$(SolutionDir)build\temp\$(Platform)-$(Configuration)\$(ProjectName)\</IntDir>
    <IncludePath>$(TargetDir)..\B+\compile-time\include;$(ProjectDir)dependencies\include;$(IncludePath)</IncludePath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <LinkIncremental>false</LinkIncremental>
    <OutDir>$(SolutionDir)build\$(Platform)-$(Configuration)\$(ProjectName)\</OutDir>
    <IntDir>$(SolutionDir)build\temp\$(Platform)-$(Configuration)\$(ProjectName)\</IntDir>
    <IncludePath>$(TargetDir)..\B+\compile-time\include;$(ProjectDir)dependencies\include;$(IncludePath)</IncludePath>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>Disabled</Optimization>
      <SDLCheck>false</SDLCheck>
      <PreprocessorDefinitions>NOMINMAX;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>false</ConformanceMode>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <AdditionalIncludeDirectories>$(TargetDir)..\B+\compile-time\include</AdditionalIncludeDirectories>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <DisableSpecificWarnings>4996;4251;26495;26812;26819</DisableSpecificWarnings>
      <PreprocessToFile>false</PreprocessToFile>
      <PreprocessKeepComments>false</PreprocessKeepComments>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <AdditionalLibraryDirectories>$(TargetDir)..\B+\compile-time\lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalDependencies>opengl32.lib;glu32.lib;glew32.lib;SDL2.lib;SDL2main.lib;assimp.lib;B+.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <PostBuildEvent>
      <Command>REM Note: Annoyingly, Robocopy return values are very non-standard; anything below 8 should be considered a success.
REM   Visual Studio considers anything other than 0 an error. So we have to manually fix this.
set VERIFY_RBCPY=if %ERRORLEVEL% GEQ 8 exit %ERRORLEVEL%

REM Copy B+ stuff to the build, using /purge but preserving this app's executable and pdb
robocopy "$(TargetDir)..\B+\run-time" "$(TargetDir.TrimEnd('\'))" *.* /E /purge /xf "$(TargetPath)" /xf "$([System.IO.Path]::ChangeExtension($(TargetPath), "pdb"))"
%VERIFY_RBCPY%

REM Copy project content to the build, overwriting the engine's content if necessary
robocopy "$(ProjectDir)content" "$(TargetDir)content" *.* /E
%VERIFY_RBCPY%

REM Robocopies succeeded; so exit successfully.
exit 0</Command>
    </PostBuildEvent>
    <PostBuildEvent>
      <Message>Copy Dependencies to Build</Message>
    </PostBuildEvent>
    <PreBuildEvent>
      <Command>set OUT_FILE=$(ProjectDir)AllTests.h
@echo off

break&gt;"%OUT_FILE%"
echo #pragma once &gt;&gt; "%OUT_FILE%"
echo // &gt;&gt; "%OUT_FILE%"
echo //DO NOT EDIT THIS FILE. &gt;&gt; "%OUT_FILE%"
echo //It is auto-generated as a pre-build step, &gt;&gt; "%OUT_FILE%"
echo //    to #include all '.hpp' files in the 'Testing' sub-directory. &gt;&gt; "%OUT_FILE%"
echo //To add to this file, just add new files in that directory (NOT in a subdirectory). &gt;&gt; "%OUT_FILE%"
echo // &gt;&gt; "%OUT_FILE%"
echo //Don't define the main() function! That will be done in main.cpp &gt;&gt; "%OUT_FILE%"
echo #define TEST_NO_MAIN &gt;&gt; "%OUT_FILE%"
echo // &gt;&gt;"%OUT_FILE%"

pushd $(ProjectDir)Tests
for /f "delims=" %%f in ('dir /b /a-d-h-s') do echo #include "Tests/%%f" &gt;&gt; "%OUT_FILE%"
popd

echo #undef TEST_NO_MAIN &gt;&gt; "%OUT_FILE%"

@echo on</Command>
    </PreBuildEvent>
    <PreBuildEvent>
      <Message>Generate the header that #includes all tests</Message>
    </PreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>Disabled</Optimization>
      <SDLCheck>false</SDLCheck>
      <PreprocessorDefinitions>NOMINMAX;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>false</ConformanceMode>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <AdditionalIncludeDirectories>$(TargetDir)..\B+\compile-time\include</AdditionalIncludeDirectories>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <DisableSpecificWarnings>4996;4251;26495;26812;26819</DisableSpecificWarnings>
      <PreprocessToFile>false</PreprocessToFile>
      <PreprocessKeepComments>false</PreprocessKeepComments>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <AdditionalLibraryDirectories>$(TargetDir)..\B+\compile-time\lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalDependencies>opengl32.lib;glu32.lib;glew32.lib;SDL2.lib;SDL2main.lib;assimp.lib;B+.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <PostBuildEvent>
      <Command>REM Note: Annoyingly, Robocopy return values are very non-standard; anything below 8 should be considered a success.
REM   Visual Studio considers anything other than 0 an error. So we have to manually fix this.
set VERIFY_RBCPY=if %ERRORLEVEL% GEQ 8 exit %ERRORLEVEL%

REM Copy B+ stuff to the build, using /purge but preserving this app's executable and pdb
robocopy "$(TargetDir)..\B+\run-time" "$(TargetDir.TrimEnd('\'))" *.* /E /purge /xf "$(TargetPath)" /xf "$([System.IO.Path]::ChangeExtension($(TargetPath), "pdb"))"
%VERIFY_RBCPY%

REM Copy project content to the build, overwriting the engine's content if necessary
robocopy "$(ProjectDir)content" "$(TargetDir)content" *.* /E
%VERIFY_RBCPY%

REM Robocopies succeeded; so exit successfully.
exit 0</Command>
    </PostBuildEvent>
    <PostBuildEvent>
      <Message>Copy Dependencies to Build</Message>
    </PostBuildEvent>
    <PreBuildEvent>
      <Command>set OUT_FILE=$(ProjectDir)AllTests.h
@echo off

break&gt;"%OUT_FILE%"
echo #pragma once &gt;&gt; "%OUT_FILE%"
echo // &gt;&gt; "%OUT_FILE%"
echo //DO NOT EDIT THIS FILE. &gt;&gt; "%OUT_FILE%"
echo //It is auto-generated as a pre-build step, &gt;&gt; "%OUT_FILE%"
echo //    to #include all '.hpp' files in the 'Testing' sub-directory. &gt;&gt; "%OUT_FILE%"
echo //To add to this file, just add new files in that directory (NOT in a subdirectory). &gt;&gt; "%OUT_FILE%"
echo // &gt;&gt; "%OUT_FILE%"
echo //Don't define the main() function! That will be done in main.cpp &gt;&gt; "%OUT_FILE%"
echo #define TEST_NO_MAIN &gt;&gt; "%OUT_FILE%"
echo // &gt;&gt;"%OUT_FILE%"

pushd $(ProjectDir)Tests
for /f "delims=" %%f in ('dir /b /a-d-h-s') do echo #include "Tests/%%f" &gt;&gt; "%OUT_FILE%"
popd

echo #undef TEST_NO_MAIN &gt;&gt; "%OUT_FILE%"

@echo on</Command>
    </PreBuildEvent>
    <PreBuildEvent>
      <Message>Generate the header that #includes all tests</Message>
    </PreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>false</SDLCheck>
      <PreprocessorDefinitions>NOMINMAX;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>false</ConformanceMode>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <AdditionalIncludeDirectories>$(TargetDir)..\B+\compile-time\include</AdditionalIncludeDirectories>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <DisableSpecificWarnings>4996;4251;26495;26812;26819</DisableSpecificWarnings>
      <PreprocessToFile>false</PreprocessToFile>
      <PreprocessKeepComments>false</PreprocessKeepComments>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <AdditionalLibraryDirectories>$(TargetDir)..\B+\compile-time\lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalDependencies>opengl32.lib;glu32.lib;glew32.lib;SDL2.lib;SDL2main.lib;assimp.lib;B+.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <PostBuildEvent>
      <Command>REM Note: Annoyingly, Robocopy return values are very non-standard; anything below 8 should be considered a success.
REM   Visual Studio considers anything other than 0 an error. So we have to manually fix this.
set VERIFY_RBCPY=if %ERRORLEVEL% GEQ 8 exit %ERRORLEVEL%

REM Copy B+ stuff to the build, using /purge but preserving this app's executable and pdb
robocopy "$(TargetDir)..\B+\run-time" "$(TargetDir.TrimEnd('\'))" *.* /E /purge /xf "$(TargetPath)" /xf "$([System.IO.Path]::ChangeExtension($(TargetPath), "pdb"))"
%VERIFY_RBCPY%

REM Copy project content to the build, overwriting the engine's content if necessary
robocopy "$(ProjectDir)content" "$(TargetDir)content" *.* /E
%VERIFY_RBCPY%

REM Robocopies succeeded; so exit successfully.
exit 0</Command>
    </PostBuildEvent>
    <PostBuildEvent>
      <Message>Copy Dependencies to Build</Message>
    </PostBuildEvent>
    <PreBuildEvent>
      <Command>set OUT_FILE=$(ProjectDir)AllTests.h
@echo off

break&gt;"%OUT_FILE%"
echo #pragma once &gt;&gt; "%OUT_FILE%"
echo // &gt;&gt; "%OUT_FILE%"
echo //DO NOT EDIT THIS FILE. &gt;&gt; "%OUT_FILE%"
echo //It is auto-generated as a pre-build step, &gt;&gt; "%OUT_FILE%"
echo //    to #include all '.hpp' files in the 'Testing' sub-directory. &gt;&gt; "%OUT_FILE%"
echo //To add to this file, just add new files in that directory (NOT in a subdirectory). &gt;&gt; "%OUT_FILE%"
echo // &gt;&gt; "%OUT_FILE%"
echo //Don't define the main() function! That will be done in main.cpp &gt;&gt; "%OUT_FILE%"
echo #define TEST_NO_MAIN &gt;&gt; "%OUT_FILE%"
echo // &gt;&gt;"%OUT_FILE%"

pushd $(ProjectDir)Tests
for /f "delims=" %%f in ('dir /b /a-d-h-s') do echo #include "Tests/%%f" &gt;&gt; "%OUT_FILE%"
popd

echo #undef TEST_NO_MAIN &gt;&gt; "%OUT_FILE%"

@echo on</Command>
    </PreBuildEvent>
    <PreBuildEvent>
      <Message>Generate the header that #includes all tests</Message>
    </PreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>false</SDLCheck>
      <PreprocessorDefinitions>NOMINMAX;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>false</ConformanceMode>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <AdditionalIncludeDirectories>$(TargetDir)..\B+\compile-time\include</AdditionalIncludeDirectories>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <DisableSpecificWarnings>4996;4251;26495;26812;26819</DisableSpecificWarnings>
      <PreprocessToFile>false</PreprocessToFile>
      <PreprocessKeepComments>false</PreprocessKeepComments>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <AdditionalLibraryDirectories>$(TargetDir)..\B+\compile-time\lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalDependencies>opengl32.lib;glu32.lib;glew32.lib;SDL2.lib;SDL2main.lib;assimp.lib;B+.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <PostBuildEvent>
      <Command>REM Note: Annoyingly, Robocopy return values are very non-standard; anything below 8 should be considered a success.
REM   Visual Studio considers anything other than 0 an error. So we have to manually fix this.
set VERIFY_RBCPY=if %ERRORLEVEL% GEQ 8 exit %ERRORLEVEL%

REM Copy B+ stuff to the build, using /purge but preserving this app's executable and pdb
robocopy "$(TargetDir)..\B+\run-time" "$(TargetDir.TrimEnd('\'))" *.* /E /purge /xf "$(TargetPath)" /xf "$([System.IO.Path]::ChangeExtension($(TargetPath), "pdb"))"
%VERIFY_RBCPY%

REM Copy project content to the build, overwriting the engine's content if necessary
robocopy "$(ProjectDir)content" "$(TargetDir)content" *.* /E
%VERIFY_RBCPY%

REM Robocopies succeeded; so exit successfully.
exit 0</Command>
    </PostBuildEvent>
    <PostBuildEvent>
      <Message>Copy Dependencies to Build</Message>
    </PostBuildEvent>
    <PreBuildEvent>
      <Command>set OUT_FILE=$(ProjectDir)AllTests.h
@echo off

break&gt;"%OUT_FILE%"
echo #pragma once &gt;&gt; "%OUT_FILE%"
echo // &gt;&gt; "%OUT_FILE%"
echo //DO NOT EDIT THIS FILE. &gt;&gt; "%OUT_FILE%"
echo //It is auto-generated as a pre-build step, &gt;&gt; "%OUT_FILE%"
echo //    to #include all '.hpp' files in the 'Testing' sub-directory. &gt;&gt; "%OUT_FILE%"
echo //To add to this file, just add new files in that directory (NOT in a subdirectory). &gt;&gt; "%OUT_FILE%"
echo // &gt;&gt; "%OUT_FILE%"
echo //Don't define the main() function! That will be done in main.cpp &gt;&gt; "%OUT_FILE%"
echo #define TEST_NO_MAIN &gt;&gt; "%OUT_FILE%"
echo // &gt;&gt;"%OUT_FILE%"

pushd $(ProjectDir)Tests
for /f "delims=" %%f in ('dir /b /a-d-h-s') do echo #include "Tests/%%f" &gt;&gt; "%OUT_FILE%"
popd

echo #undef TEST_NO_MAIN &gt;&gt; "%OUT_FILE%"

@echo on</Command>
    </PreBuildEvent>
    <PreBuildEvent>
      <Message>Generate the header that #includes all tests</Message>
    </PreBuildEvent>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClCompile Include="main.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="AllTests.h" />
    <ClInclude Include="SimpleApp.hpp" />
    <ClInclude Include="Tests\Buffers.hpp" />
    <ClInclude Include="Tests\Math.hpp" />
    <ClInclude Include="Tests\SceneTrees.hpp" />
    <ClInclude Include="Tests\ShaderCompilation.hpp" />
    <ClInclude Include="Tests\SimpleApps.hpp" />
    <ClInclude Include="Tests\Strings.hpp" />
    <ClInclude Include="Tests\TexTargets.hpp" />
    <ClInclude Include="Tests\Textures.hpp" />
    <ClInclude Include="Tests\Toml.hpp" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>